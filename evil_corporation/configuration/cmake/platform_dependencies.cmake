macro(platform_setup)
	if (MSVC)
        message(STATUS "Visual Studio configurated")

	    if (COMMAND cmake_policy)
            CMAKE_POLICY(SET CMP0003 NEW)
        endif(COMMAND cmake_policy)

        set(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}   /MDd /MP /Zi /W1 /Ob0 /Od /EHsc /RTC1 /D_DEBUG /D_ITERATOR_DEBUG_LEVEL=2 /DBoost_DEBUG=ON")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /MP /O2 /Ob2") 
        
        set_property( GLOBAL PROPERTY USE_FOLDERS ON )
        set_property( GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "")
        set_property( GLOBAL PROPERTY CXX_STANDARD 17 )   

        add_definitions(-D_WIN32_WINNT=0x0501)
        add_definitions(-D_SCL_SECURE_NO_WARNINGS)
        add_definitions(-D_CRT_SECURE_NO_WARNINGS)
        add_definitions(-D_SCL_SECURE_NO_DEPRECATE)
        add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
    elseif(ANDROID)
        message(STATUS "Android configurated")
        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic") 
	elseif(UNIX)
        message(STATUS "Unit configurated")
		set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_CXX_FLAGS} -fpermissive -O1 -pthread -lpthread -lboost_serialization -std=c++1y -fPIC -pedantic")
        set(CMAKE_C++_LINK_EXECUTABLE "${CMAKE_CXX_LINK_EXECUTABLE}") 
    else()
        message(STATUS "Unknown platform")
	endif()
endmacro(platform_setup)